name: CI Pipeline

on:
  workflow_dispatch:
    # Add additional trigger events as needed (e.g., push, pull_request, etc.)

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  MYSQL_ROOT_PASSWORD: root

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    if: github.actor == 'pablo-code-org'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: code-dot-org

      - name: Find and Cache Stale Files
        id: stalefiles
        run: |
          find code-dot-org -type f -not -path './.git/*' -mtime +730 > stale_files.txt
          echo "::set-output name=stale_hash::$(sha256sum stale_files.txt | cut -d ' ' -f1)"

      - name: Cache stale files
        uses: actions/cache@v2
        with:
          path: |
            $(cat stale_files.txt)
          key: ${{ runner.os }}-stale-${{ steps.stalefiles.outputs.stale_hash }}

      - name: Fetch and Verify MySQL GPG Key
        run: |
          # Fetch the GPG key using gpg
          gpg --keyserver keyserver.ubuntu.com --recv-keys B7B3B788A8D3785C
          
          # Export the key to a file
          gpg --export B7B3B788A8D3785C > mysql.gpg

          # Verify the key fingerprint
          FINGERPRINT=$(gpg --fingerprint B7B3B788A8D3785C | grep -oP 'THE_EXPECTED_FINGERPRINT')
          echo "Extracted Fingerprint: --$FINGERPRINT--"
          if [ "$FINGERPRINT" != "THE_EXPECTED_FINGERPRINT" ]; then
            echo "Fingerprint verification failed!"
            exit 1
          fi

      - name: Set up Docker Environment
        run: docker build --build-arg MYSQL_GPG_KEY_FILE=mysql.gpg -t code-dot-org-testing-docker-image -f ./code-dot-org/docker/dockerfiles/Dockerfile ./code-dot-org

      - name: Run Unit Tests
        run: |
          docker run code-dot-org-testing-docker-image /bin/bash -c "source /home/runner/work/code-dot-org/code-dot-org/docker/unit_test.sh"

      - name: Run UI Tests
        run: |
          docker run code-dot-org-testing-docker-image /bin/bash -c "source /home/runner/work/code-dot-org/code-dot-org/docker/ui_tests.sh"

      - name: Update Cache
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
